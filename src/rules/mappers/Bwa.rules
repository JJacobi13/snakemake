"""
@version: 0.1
@author: Jetse
@attention: Untested!

Mapping with BWA.
"""

from qualityControl.files import BamFile
import subprocess
BWA_VERSION = re.compile("Version:(.*?)\n").search(subprocess.Popen("bwa", shell=True, stderr=subprocess.PIPE).stderr.read().decode("utf-8")).group(1).strip()


rule bwaSampe:
    input: 
        forward = "preprocessing/{prefix}_1.fastq",
        reversed = "preprocessing/{prefix}_2.fastq",
        forwardSai = "mapped/{prefix}_1.sai",
        reversedSai = "mapped/{prefix}_2.sai",
        refGenome = CONFIG["refGenome"],
        refGenomeIndex = CONFIG["refGenome"] + ".pac"
    output: "mapped/bwaSampe.{prefix}.sam"
    params:
        optionalOpts = CONFIG["bwaSampe"]["optionalOpts"]
    version: BWA_VERSION
    run:
        shell("bwa sampe {params.optionalOpts} {input.refGenome}  "
              "{input.forwardSai} {input.reversedSai} {input.forward} {input.reversed} > {output[0]}".format(params=params, input=input, output=output))
        BamFile.BamFile(output[0], sam=True).isValid()

rule bwaSamse:
    input: 
        reads = "preprocessing/{prefix}.fastq",
        readsSai = "mapped/{prefix}.sai",
        refGenome = CONFIG["refGenome"],
        refGenomeIndex = CONFIG["refGenome"] + ".pac"
    output: "mapped/bwaSamse.{prefix}.sam"
    params:
        optionalOpts = CONFIG["bwaSamse"]["optionalOpts"]
    version: BWA_VERSION
    run:
        shell("bwa samse {params.optionalOpts} {input.refGenome}  "
              "{input.readsSai} {input.reads} > {output[0]".format(params=params, input=input))
        BamFile.BamFile(output[0], sam=True).isValid()
        
rule bwaAln:
    input:
        reads = "preprocessing/{prefix}.fastq",
        refGenome = CONFIG["refGenome"],
        refGenomeIndex = CONFIG["refGenome"] + ".pac"
    output: "mapped/{prefix}.sai"
    version: BWA_VERSION
    params:
        optionalOpts = CONFIG["bwaAln"]["optionalOpts"]
    shell: "bwa aln -t {threads} {input.refGenome} {input.reads} > {output[0]}"
    
rule bwaIndex:
    input: "{prefix}.fasta"
    output: "{prefix}.fasta.pac"
    version: BWA_VERSION
    shell: "bwa index {input[0]}"
    
rule bwaMemPaired:
    input:
        forward = "preprocessing/{prefix}_1.fastq",
        reversed = "preprocessing/{prefix}_2.fastq",
        refGenome = CONFIG["refGenome"],
        refGenomeIndex = CONFIG["refGenome"] + ".pac"
    output: "mapped/bwaMem.{prefix}.sam"
    threads: 8
    version: BWA_VERSION
    params:
        optionalOpts = CONFIG["bwaMem"]["optionalOpts"]
    run:
        shell("bwa mem -t {threads} {input.refGenome} {input.forward} {input.reversed} > {output[0]}") 
        
rule bwaMemSingle:
    input:
        reads = "preprocessing/{prefix}.fastq",
        refGenome = CONFIG["refGenome"],
        refGenomeIndex = CONFIG["refGenome"] + ".pac"
    output: "mapped/bwaMem.{prefix}.sam"
    threads: 8
    params:
        optionalOpts = CONFIG["bwaMem"]["optionalOpts"]
    version: BWA_VERSION
    run:
        shell("bwa mem -t {threads} {input.refGenome} {input.reads} > {output[0]}") 